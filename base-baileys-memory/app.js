const {
  createBot,
  createProvider,
  createFlow,
  addKeyword,
} = require("@bot-whatsapp/bot");

const QRPortalWeb = require("@bot-whatsapp/portal");
const BaileysProvider = require("@bot-whatsapp/provider/baileys");
const MockAdapter = require("@bot-whatsapp/database/mock");

const flowGracias = addKeyword(["gracias", "grac"]).addAnswer(
  "Un placer poder ayudarte"
)

const flowCosto = addKeyword([
  "costo",
  "costos",
  "honorarios",
  "valor",
  "presupuesto",
  "cotizacion",
])
  .addAnswer(
    "Para poder enviarte un presupuesto necesitamos analizar tu situaci칩n"
  )
  .addAnswer("Dejanos tu correo para contactarte");

const flowOptMonot1 = addKeyword(["1", "1-"])
  .addAnswer(
    //"A continuaci칩n te enviamos un link para acceder al formulario de inscripci칩n a monotributo"
    "A continuaci칩n podr치s acceder a un link para rellenar un formulario de alta como monotributista. Los honorarios correspondientes por dicho tramite son de $35.000 , si necesitas asesoramiento no dudes en consultarnos"
  )
  .addAnswer("https://monotributo.net/formularios/monotributo.php");

const flowOptMonot2 = addKeyword(["2", "2-"]).addAnswer(
  "Perfecto, te vamos a solicitar por favor un mail de contacto, a la brevedad un profesional se estar치 contactando",
  { capture: true },
  (ctx, { fallBack }) => {
    if (!ctx.body.includes("@")) {
      return fallBack("El correo es inv치lido, intenta nuevamente.");
    } else {
      return fallBack("Gracias, un profesional te contactar치 pronto.");
    }
  }
)

const flowOptMonot3 = addKeyword(["3", "3-"]).addAnswer(
  "Perfecto, te vamos a solicitar por favor un mail de contacto, a la brevedad un profesional se estar치 contactando",
  { capture: true },
  (ctx, { fallBack }) => {
    if (!ctx.body.includes("@")) {
      return fallBack("El correo es inv치lido, intenta nuevamente.");
    } else {
      return fallBack("Gracias, un profesional te contactar치 pronto.");
    }
  }
)

const flowMonot = addKeyword(["1", "1-", "monotributo"]).addAnswer(
  [
    "0- Volver al men칰 principal",
    "1- Quiero inscribirme al Monotributo",
    "2- Ya estoy inscripto, necesito asesoramiento",
    "3- No estoy inscripto, necesito asesoramiento",
  ],
  null,
  null,
  [flowOptMonot1, flowOptMonot2, flowOptMonot3]
)

const flowOptInscripto1 = addKeyword(["1", "1-"])
  .addAnswer(
    //"A continuaci칩n te enviamos un link para acceder al formulario de inscripci칩n a RI"
    "A continuaci칩n podr치s acceder a un link para rellenar un formulario de alta como Responsable Inscripto. Los honorarios correspondientes por dicho tr치mite son de $50.000 , si necesitas asesoramiento no dudes en consultarnos"
  )
  .addAnswer("https://monotributo.net/formularios/responsableInscripto.php");

const flowOptInscripto2 = addKeyword(["2", "2-"]).addAnswer(
  "Perfecto, te vamos a solicitar por favor un mail de contacto, a la brevedad un profesional se estar치 contactando",
  { capture: true },
  (ctx, { fallBack }) => {
    if (!ctx.body.includes("@")) {
      return fallBack("El correo es inv치lido, intenta nuevamente.");
    } else {
      return fallBack("Gracias, un profesional te contactar치 pronto.");
    }
  }
)

const flowOptInscripto3 = addKeyword(["3", "3-"]).addAnswer(
  "Perfecto, te vamos a solicitar por favor un mail de contacto, a la brevedad un profesional se estar치 contactando",
  { capture: true },
  (ctx, { fallBack }) => {
    if (!ctx.body.includes("@")) {
      return fallBack("El correo es inv치lido, intenta nuevamente.");
    } else {
      return fallBack("Gracias, un profesional te contactar치 pronto.");
    }
  }
)

const flowOptInscripto4 = addKeyword(["4", "4-"]).addAnswer(
  "Perfecto, te vamos a solicitar por favor un mail de contacto, a la brevedad un profesional se estar치 contactando",
  { capture: true },
  (ctx, { fallBack }) => {
    if (!ctx.body.includes("@")) {
      return fallBack("El correo es inv치lido, intenta nuevamente.");
    } else {
      return fallBack("Gracias, un profesional te contactar치 pronto.");
    }
  }
)

const flowInscripto = addKeyword(["2", "2-", "inscripto"]).addAnswer(
  [
    "0- Volver al men칰 principal",
    "1- Quiero ser responsable inscripto",
    "2- Ya soy ri, necesito asesoramiento",
    "3- No soy ri, necesito asesoramiento",
    "4- Soy monotributista, quiero pasarme a ri",
  ],
  null,
  null,
  [flowOptInscripto1, flowOptInscripto2, flowOptInscripto3]
)

const flowOrigen = addKeyword(["3", "3-", "origen"]).addAnswer(
  "Perfecto, los honorarios correspondientes por dicho tr치mite son de $30.000 , te vamos a solicitar por favor un mail de contacto, a la brevedad un profesional se estar치 contactando",
  { capture: true },
  (ctx, { fallBack }) => {
    if (!ctx.body.includes("@")) {
      return fallBack("El correo es inv치lido, intenta nuevamente.");
    } else {
      return fallBack("Gracias, un profesional te contactar치 pronto.");
    }
  }
)

const flowBonos = addKeyword(["4", "4-", "bonos"]).addAnswer(
  "Perfecto, te vamos a solicitar por favor un mail de contacto, a la brevedad un profesional se estar치 contactando",
  { capture: true },
  (ctx, { fallBack }) => {
    if (!ctx.body.includes("@")) {
      return fallBack("El correo es inv치lido, intenta nuevamente.");
    } else {
      return fallBack("Gracias, un profesional te contactar치 pronto.");
    }
  }
)

const flowBlanqueo = addKeyword(["5", "5-", "blanqueo"]).addAnswer(
  "Perfecto, te vamos a solicitar por favor un mail de contacto, a la brevedad un profesional se estar치 contactando",
  { capture: true },
  (ctx, { fallBack }) => {
    if (!ctx.body.includes("@")) {
      return fallBack("El correo es inv치lido, intenta nuevamente.");
    } else {
      return fallBack("Gracias, un profesional te contactar치 pronto.");
    }
  }
)

const flowHabla = addKeyword(["6", "6-", "habla"]).addAnswer(
  "Perfecto, te vamos a solicitar por favor un mail de contacto, a la brevedad un profesional se estar치 contactando",
  { capture: true },
  (ctx, { fallBack }) => {
    if (!ctx.body.includes("@")) {
      return fallBack("El correo es inv치lido, intenta nuevamente.");
    } else {
      return fallBack("Gracias, un profesional te contactar치 pronto.");
    }
  }
)

const flowAcerca = addKeyword(["7", "7-", "acerca"]).addAnswer([
  "Acerca de nosotros:",
  "Hola! Monotributo.Net es una p치gina de tr치mites y asesoramiento impositivo, en la cual vas a poder realizarlos de manera segura.",
  "Contamos con profesionales recibidos y matriculados. Que tienen m치s de 10 a침os de experiencia en el campo de los impuestos, especializados principalmente en el R칠gimen del Monotributo. Adem치s, tenemos la informaci칩n actualizada de AFIP para brindarte el mejor asesoramiento en tiempo y forma. Cont치 con nuestra experiencia para ayudarte!",
])

// Obtiene la hora actual (Arg) por si el server est치 afuera
const horaActual = new Date().toLocaleString("en-US", { hour: 'numeric', hour12: false, timeZone: "America/Argentina/Buenos_Aires" });


const buenas = async () => {
  if (horaActual >= 6 && horaActual < 12) {
    buenos = "춰Buenos d칤as!";
  } else if (horaActual >= 12 && horaActual < 18) {
    buenos = "춰Buenas tardes!";
  } else {
    buenos = "춰Buenas noches!";
  }
  return buenos;
}
const flowPrincipal = addKeyword(["hola", "buenas", "consulta", "0"])
  .addAnswer("춰Hola!", null, async (ctx, { flowDynamic }) => {
    const data = await buenas();
    await flowDynamic(data);
  })
  .addAnswer("游뗿 Bienvenid@ al Chatbot de Monotributo.Net", {
    delay: 1000,
  })
  .addAnswer("Por favor eleg칤 una opci칩n para recibir informaci칩n:", {
    delay: 1000,
  })

  .addAnswer(
    [
      "游녤 1- Monotributo",
      "游녤 2- Responsable Inscripto",
      "游녤 3- Origen de fondos",
      "游녤 4- Bonos mensuales",
      "游녤 5- Consultanos sobre blanqueo de capitales",
      "游녤 6- Habla con nosotros",
      "游녤 7- Info sobre nosotros",
    ],
    null,
    null,
    [
      flowGracias,
      flowMonot,
      flowInscripto,
      flowOrigen,
      flowBonos,
      flowBlanqueo,
      flowHabla,
      flowAcerca,
      flowCosto,
    ]
  )

const main = async () => {
  const adapterDB = new MockAdapter();
  const adapterFlow = createFlow([flowPrincipal]);
  const adapterProvider = createProvider(BaileysProvider);

  createBot({
    flow: adapterFlow,
    provider: adapterProvider,
    database: adapterDB,
  });

  QRPortalWeb();
  //para cambiar puerto QRPortal({port:4000})
}

main();
